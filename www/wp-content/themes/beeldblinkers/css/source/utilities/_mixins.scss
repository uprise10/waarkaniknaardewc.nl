/* ---------------------------------------------------------------------------
    rem

    Calculates rem values for the given font sizes in pixels

    Also provides px based fallback for browsers without rem support (IE8)
*/
//noinspection CssOverwrittenProperties
@mixin pxrem($target, $context: 16) {
    font-size: ($target) + px;
    font-size: ($target / $context) * 1rem;
}


/* ---------------------------------------------------------------------------
    Shadow
*/

@mixin default-shadow() {
    box-shadow: 0px 2px 8px 0px rgba(0, 0, 0, .3);
}

/* ---------------------------------------------------------------------------
    Border
*/

@mixin default-border() {
    border: solid 1px rgba(241, 241, 241, 1);
}

/* ---------------------------------------------------------------------------
    Border Radius
*/

@mixin default-border-radius() {
    border-radius: 3px;
}
@mixin custom-border-radius($topleft, $topright, $bottomright, $bottomleft) {
    border-radius: ($topleft) + px ($topright) + px ($bottomright) + px ($bottomleft) + px;
}


/* ---------------------------------------------------------------------------
    Clear Fix
*/

@mixin clearfix() {
    &:after {
        content:"";
        display:table;
        clear:both;
    }
}

/* ---------------------------------------------------------------------------
    flexEmbed

    Flexible media embeds

    For use with media embeds – such as videos, slideshows, or even images –
    that need to retain a specific aspect ratio but adapt to the width of their
    containing element.

    Based on https://github.com/suitcss/flex-embed/blob/master/flex-embed.css

    Example:
    .item-to-flex{
        @include flexEmbed(1000, 480);
        background-image: url('http://placeimg.com/1000/480/any');
        background-position: 50%;
        background-repeat: no-repeat;
        background-size: cover;
        margin: 0 auto;
        max-height: 480px;
        max-width: 1000px;
    }

    Arguments:
    $width       : The width of the element
    $height      : The height of the element
    $hasItem     : [optional] Add extra output if element contains an iframe, object, embed, etc
    $itemClass   : [optional] Class of element to be positioned inside container
*/
@mixin flexEmbed($width, $height, $hasItem: false, $itemClass: false) {
    // Calc ratio
    $ratio: ($height / $width)*100%;

    display: block;
    overflow: hidden;
    position: relative;
    // This is where the magic happens
    &:before {
        content: "";
        display: block;
        width: 100%;
        padding-bottom: $ratio;
    }
    // Set element style (embedded youtube clip for example)
    @if $hasItem {
        @if $itemClass {
            .#{$itemClass},
            iframe,
            embed,
            object {
                bottom: 0;
                height: 100%;
                left: 0;
                position: absolute;
                top: 0;
                width: 100%;
            }
        } @else {
            iframe,
            embed,
            object {
                bottom: 0;
                height: 100%;
                left: 0;
                position: absolute;
                top: 0;
                width: 100%;
            }
        }
    }
}

/*
    Adjusts font-size
*/
@mixin typeSize($font-size, $font-leading) {
    @include adjust-font-size-to($font-size, $font-leading);
}

/*
    Function to determine diff between colors.
    Handy if you want to use the ;ighten() & darken() functions.

    Example use: @debug(color-diff(#ffc600, #fff6d8));
*/
@function color-diff($color-a, $color-b) {
    $hue: hue($color-a) - hue($color-b);
    $saturation: saturation($color-a) - saturation($color-b);
    $lightness: lightness($color-a) - lightness($color-b);

    $function-hue: 'adjust-hue';
    $function-saturation: if($saturation > 0, 'desaturate', 'saturate');
    $function-lightness: if($lightness > 0, 'darken', 'lighten');

    @return (
        #{$function-hue}: -($hue),
        #{$function-saturation}: abs($saturation),
        #{$function-lightness}: abs($lightness),
    );
}

/*
    Baseline grind background
    Example:
    $map: (
        small: (
            font-size: 16px,
            line-height: 32px
        ),
        large:(
            font-size: 18px,
            line-height: 36px,
            breakpoint: $breakpoint-desktop
        )
    );
    html {
        @include debug-baseline-bg($map);
    }
*/

@mixin debug-baseline-bg($line-height) {

    background-image: linear-gradient(to top, rgba(0, 0, 0, .3) 1%, rgba(0, 0, 0, 0) 2%), linear-gradient(to top, rgba(0, 0, 0, .3) 5%, rgba(0, 0, 0, 0) 5%);
    background-size: 100% $line-height, 100% $line-height/2;
    //background-position: left top;

}

///////////////////////////////////
// Since we can't extend %t-{} placeholders in media queries,
// but sometimes we need to fetch the correct font size we have this mixin!
// Usage: @include set-font-size-variant('large');
///////////////////////////////////
@mixin set-font-size-variant($variant-name) {
    @if (map-has-key($base-variants, $variant-name)) {
        @each $key, $variant in $base-variants {
            @if ($key == $variant-name) {
                @include adjust-font-size-to((map-get($variant, "font-size") / $base-font-size-for-calculations) *1em);
            }
        }
    }
}

///////
// Typography mixins
@mixin set-leader($lines, $property) {
    @include leader($lines, $base-font-size, $property);
    @if variable-exists(base-font-sizes) {
        @each $key, $base-sizes in $base-font-sizes {
            @include breakpoint(map-get($base-sizes, 'breakpoint')) {
                $orig-fs: $base-font-size;
                $orig-ln: $base-line-height;
                $orig-round: $round-to-nearest-half-line;
                // Overwrite with settings from map
                $base-font-size: map-get($base-sizes, 'font-size') !global;
                $base-line-height: map-get($base-sizes, 'line-height') !global;
                @include leader($lines, $base-font-size, $property);
                // reset
                $base-font-size: $orig-fs !global;
                $base-line-height: $orig-ln !global;
                $round-to-nearest-half-line: $orig-round !global;
            }
        }
    }
}

@mixin set-trailer($lines, $property) {
    @include trailer($lines, $base-font-size, $property);
    @if variable-exists(base-font-sizes) {
        @each $key, $base-sizes in $base-font-sizes {
            @include breakpoint(map-get($base-sizes, 'breakpoint')) {
                $orig-fs: $base-font-size;
                $orig-ln: $base-line-height;
                $orig-round: $round-to-nearest-half-line;
                // Overwrite with settings from map
                $base-font-size: map-get($base-sizes, 'font-size') !global;
                $base-line-height: map-get($base-sizes, 'line-height') !global;
                @include trailer($lines, $base-font-size, $property);
                // reset
                $base-font-size: $orig-fs !global;
                $base-line-height: $orig-ln !global;
                $round-to-nearest-half-line: $orig-round !global;
            }
        }
    }
}

@mixin margin-top($lines) {
    @include set-leader($lines, 'margin')
}

@mixin padding-top($lines) {
    @include set-leader($lines, 'padding')
}

@mixin margin-bottom($lines) {
    @include set-trailer($lines, 'margin')
}

@mixin padding-bottom($lines) {
    @include set-trailer($lines, 'padding')
}

//noinspection CssOverwrittenProperties
@mixin rhythm-height($lines, $property: 'height') {
    #{$property}: $base-line-height * $lines;
    #{$property}: rhythm($lines);
    @if variable-exists(base-font-sizes) {
        @each $key, $base-sizes in $base-font-sizes {
            @include breakpoint(map-get($base-sizes, 'breakpoint')) {
                $orig-fs: $base-font-size;
                $orig-ln: $base-line-height;
                $orig-round: $round-to-nearest-half-line;
                // Overwrite with settings from map
                $base-font-size: map-get($base-sizes, 'font-size') !global;
                $base-line-height: map-get($base-sizes, 'line-height') !global;
                #{$property}: $base-line-height * $lines;
                #{$property}: rhythm($lines);
                // reset
                $base-font-size: $orig-fs !global;
                $base-line-height: $orig-ln !global;
                $round-to-nearest-half-line: $orig-round !global;
            }
        }
    }
}


@mixin centerer {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin vcenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}